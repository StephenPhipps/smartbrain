#include <iostream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

/*
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example 1:
Input: nums =
[-2,1,-3,4,-1,2,1,-5,4]

loop to track the current windowsize (we need to try every window)

loop to sum the current window size

Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

Example 2:
Input: nums = [1]
Output: 1

Example 3:
Input: nums = [0]
Output: 0

Example 4:
Input: nums = [-1]
Output: -1

Example 5:
Input: nums = [-100000]
Output: -100000

Communication
Problem-Solving
Syntax
Verification
*/
int solution(int nums[],int size){
    int maxWindowSizePossible = 9, temp = 0;
    int max = 0;

    for(int windowSize = 1; windowSize < maxWindowSizePossible; windowSize++) { // try a window size
        for(int j = 0; j < windowSize; j++) {   // sum the current window size
            cout << "temp = " << temp << endl;
            temp = temp + nums[j];
            if(temp > max) { // update max sum if we
                max = temp;
            }
        }
        cout << max << endl;
    }

    return max;
}

int main() {

    int nums[] = {-2,1,-3,4,-1,2,1,-5,4};

    int answer = solution(nums, 9);

    cout << "Answer = " << answer << endl;

    return 0;
}
